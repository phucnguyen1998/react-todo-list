{"version":3,"sources":["components/TaskForm.js","components/Seach.js","components/Sort.js","components/Control.js","components/TaskItem.js","components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["TaskForm","props","onChange","event","target","name","value","setState","onSubmit","preventDefault","state","onClear","onCloseForm","id","status","this","task","nextProps","className","onClick","type","required","Component","Seach","onSearch","keyword","placeholder","Sort","sortBy","sortValue","onSort","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","role","aria-hidden","Control","TaskItem","onUpdateStatus","onDelete","onUpdate","index","TaskList","onFilter","filterName","filterStatus","elmTask","tasks","map","key","App","onToggleForm","isDisplayForm","taskEditing","onShowForm","data","randomstring","generate","push","findIndex","localStorage","setItem","JSON","stringify","_","result","forEach","splice","toLowerCase","parseInt","filter","getItem","parse","indexOf","sort","a","b","elmTaskForm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d49e5d0f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TaskForm extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            id:'',\n            name: '',\n            status: false\n        }\n    }\n    \n    onChange = (event) => {\n        let target = event.target;\n        let name = target.name;\n        //console.log('task',name)//status;\n        let value = target.value;\n        if(name === 'status'){\n            value = target.value === 'true' ? true : false;\n        }\n        this.setState({\n            [name]: value\n        });   \n    }\n\n    onSubmit = (event) => {\n        event.preventDefault();\n        this.props.onSubmit(this.state);\n        // huy va dong form\n        this.onClear();\n        this.onCloseForm();\n    }\n\n    onCloseForm = () => {\n        this.props.onCloseForm();\n    }\n\n    onClear = () => {\n        this.setState({\n            id: '',\n            name: '',\n            status: false\n        });\n    }\n\n    \n    componentWillMount() {\n        if(this.props.task){\n            this.setState({\n                id: this.props.task.id,\n                name: this.props.task.name,\n                status: this.props.task.status\n            });\n            //console.log(this.state);\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps && nextProps.task){\n            this.setState({\n                id: nextProps.task.id,\n                name: nextProps.task.name,\n                status: nextProps.task.status\n            });\n            //console.log(this.state);\n        }else if(nextProps && nextProps.task === null){\n            // console.log('sua -> them');\n            this.setState({\n                id:'',\n                name: '',\n                status: false\n            });\n            \n        }\n    }\n    \n    \n  render() { \n    return (\n        <div className=\"panel panel-warning\">\n            <div className=\"panel-heading\">\n                <h3 className=\"panel-title\">{this.state.id !== '' ? 'Cập nhật công việc' : 'Thêm công việc'}\n                    <span className=\"fa fa-times-circle text-right\" onClick={this.onCloseForm}></span>\n                </h3>\n            </div>\n            <div className=\"panel-body\">\n                <form onSubmit={this.onSubmit}>\n                    <div className=\"form-group\">\n                        <label>Tên :</label>\n                        <input type=\"text\" className=\"form-control\" name=\"name\" value={this.state.name} onChange={this.onChange} />\n                    </div>\n                    <label>Trạng Thái :</label>\n                    <select className=\"form-control\" required=\"required\" name=\"status\" value={this.state.status} onChange={this.onChange}>\n                        <option value={true}>Kích Hoạt</option>\n                        <option value={false}>Ẩn</option>\n                    </select>\n                    <br/>\n                    <div className=\"text-center\">\n                        <button type=\"submit\" className=\"btn btn-warning\">Thêm</button>&nbsp;\n                        <button type=\"button\" className=\"btn btn-danger\" onClick={this.onClear}>Hủy Bỏ</button>\n                    </div>\n                </form>\n            </div>\n        </div> \n    );\n  }\n}\n\nexport default TaskForm;\n\n","import React, { Component } from 'react';\n\n\nclass Seach extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            keyword: ''\n        }\n    }\n\n    onChange = (event) => {\n        let target = event.target;\n        let name = target.name;\n        let value = target.value;\n        this.setState({\n            [name]: value\n        });\n    }\n\n    onSearch = () => {\n        this.props.onSearch(this.state.keyword)\n    }\n\n    render() {\n        let {keyword} = this.state;\n        return (\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n                <div className=\"input-group\">\n                    <input \n                        type=\"text\" \n                        name=\"keyword\" \n                        className=\"form-control\" \n                        placeholder=\"Nhập từ khóa...\" \n                        value={keyword}\n                        onChange={this.onChange}\n                    />\n                    <span className=\"input-group-btn\">\n                        <button \n                            className=\"btn btn-primary\" \n                            type=\"button\"\n                            onClick = {this.onSearch}\n                        >\n                            <span className=\"fa fa-search mr-5\"></span>Tìm\n                        </button>\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Seach;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Sort extends Component {\n    \n    onClick = (sortBy, sortValue) => {\n       this.props.onSort(sortBy,sortValue)\n    }\n\n    render() {\n        return (\n            <div className=\"col-xs-6 col-sm-6 col-md-6 col-lg-6\">\n                <div className=\"dropdown\">\n                    <button className=\"btn btn-primary dropdown-toggle\" type=\"button\" id=\"dropdownMenu1\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"true\">\n                        Sắp Xếp <span className=\"fa fa-caret-square-o-down ml-5\"></span>\n                    </button>\n                    <ul className=\"dropdown-menu\" aria-labelledby=\"dropdownMenu1\">\n                        <li className=\"d-flex\" onClick={() => this.onClick('name',1)}>\n                            <Link role=\"button\">\n                                <span className=\"fa fa-sort-alpha-asc pr-5\">\n                                    Tên A-Z\n                                </span>\n                            </Link>\n                            {(this.props.sortBy === 'name' && this.props.sortValue === 1) ? <i className=\"fa fa-check m-auto\" aria-hidden=\"true\"></i> : ''}\n                        </li>\n                        <li className=\"d-flex\" onClick={() => this.onClick('name',-1)}>\n                            <Link role=\"button\">\n                                <span className=\"fa fa-sort-alpha-desc pr-5\">\n                                    Tên Z-A\n                                </span>\n                            </Link>\n                            {(this.props.sortBy === 'name' && this.props.sortValue === -1) ? <i className=\"fa fa-check m-auto\" aria-hidden=\"true\"></i> : ''}\n                        </li>\n                        <li role=\"separator\" className=\"divider\"></li>\n                        <li className=\"d-flex\" onClick={() => this.onClick('status',1)}>\n                            <Link role=\"button\">T.T Kích Hoạt</Link>\n                            {(this.props.sortBy === 'status' && this.props.sortValue === 1) ? <i className=\"fa fa-check m-auto\" aria-hidden=\"true\"></i> : ''}\n                        </li>\n                        <li className=\"d-flex\" onClick={() => this.onClick('status',-1)} >\n                            <Link role=\"button\">Trạng Thái Ẩn</Link>\n                            {(this.props.sortBy === 'status' && this.props.sortValue === -1) ? <i className=\"fa fa-check m-auto\" aria-hidden=\"true\"></i> : ''}\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Sort;","import React, { Component } from 'react';\nimport Seach from './Seach';\nimport Sort from './Sort';\n\nclass Control extends Component {\n\n    render() {\n        return (\n            <div className=\"row mt-15\">  \n                {/* Seach */}\n                <Seach onSearch = {this.props.onSearch} />\n                {/* Sort */}\n                <Sort sortBy= {this.props.sortBy} sortValue={this.props.sortValue} onSort = {this.props.onSort}/>\n            </div>\n        );\n    }\n}\n\nexport default Control;","import React, { Component } from 'react';\n\nclass TaskItem extends Component {\n\n    onUpdateStatus = () => {\n        this.props.onUpdateStatus(this.props.task.id);\n    }\n\n    onDelete = () => {\n        this.props.onDelete(this.props.task.id);\n    }\n\n    onUpdate = () => {\n        this.props.onUpdate(this.props.task.id);\n    }\n\n    render() {\n        let {task, index} = this.props;\n        return (\n            <tr>\n                <td>{index + 1}</td>\n                <td>{task.name}</td>\n                <td className=\"text-center\">\n                    <span onClick={this.onUpdateStatus} className={task.status === true ? \"label label-danger\" : \"label label-success\"}>\n                                {task.status === true ? 'Kích Hoạt' : 'Ẩn'}\n                            </span>\n                </td>\n                <td className=\"text-center\">\n                    <button onClick={this.onUpdate} type=\"button\" className=\"btn btn-warning\">\n                        <span className=\"fa fa-pencil mr-5\"></span>Sửa\n                    </button>\n                    &nbsp;\n                    <button onClick={this.onDelete} type=\"button\" className=\"btn btn-danger\">\n                        <span className=\"fa fa-trash mr-5\"></span>Xóa\n                    </button>\n                </td>\n            </tr>\n        );\n    }\n}\n\nexport default TaskItem;","import React, { Component } from 'react';\nimport TaskItem from './TaskItem';\n\nclass TaskList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state= {\n            filterName: '',\n            filterStatus: -1 //all: -1, active:1, hide:0\n        }\n    }\n    \n    onChange = (event) => {\n        let target = event.target;\n        let name = target.name;\n        let value = target.value;\n        this.props.onFilter(\n            name === 'filterName' ? value : this.state.filterName, \n            name === 'filterStatus' ? value : this.state.filterStatus\n        );\n        this.setState({\n            [name]: value\n        });\n\n    }\n\n    render() {\n        let {tasks} = this.props;\n        let elmTask = tasks.map((task,index) => {\n            return (<TaskItem onUpdate={this.props.onUpdate} onDelete={this.props.onDelete} onUpdateStatus={this.props.onUpdateStatus} key={task.id} index={index} task={task} />)\n        });\n        let {filterName, filterStatus} = this.state;\n        return (\n            <table className=\"table table-bordered table-hover\">\n                <thead>\n                    <tr>\n                        <th className=\"text-center\">STT</th>\n                        <th className=\"text-center\">Tên</th>\n                        <th className=\"text-center\">Trạng Thái</th>\n                        <th className=\"text-center\">Hành Động</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td></td>\n                        <td>\n                            <input type=\"text\" className=\"form-control\" name=\"filterName\" value={filterName} onChange={this.onChange}/>\n                        </td>\n                        <td>\n                            <select className=\"form-control\" name=\"filterStatus\" value={filterStatus} onChange={this.onChange}>\n                                <option value=\"-1\">Tất Cả</option>\n                                <option value=\"0\">Ẩn</option>\n                                <option value=\"1\">Kích Hoạt</option>\n                            </select>\n                        </td>\n                        <td></td>\n                    </tr>\n                    {elmTask}\n                </tbody>\n            </table>\n        );\n    }\n}\n\nexport default TaskList;","import React, { Component } from 'react';\nimport './App.css';\nimport TaskForm from './components/TaskForm';\nimport Control from './components/Control';\nimport TaskList from './components/TaskList';\nimport randomstring from 'randomstring';\nimport _ from 'lodash';\nimport {\n  BrowserRouter as Router\n} from \"react-router-dom\";\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      tasks: [], // id: duy nhat khong trung, name, status\n      isDisplayForm: false,\n      taskEditing: null,\n      filter:{\n        name:'',\n        status: -1\n      },\n      keyword: '',\n      sortBy: 'name',\n      sortValue: 1,\n    }\n  }\n  \n  \n  componentWillMount() {\n    if(localStorage && localStorage.getItem('tasks')){\n      let tasks = JSON.parse(localStorage.getItem('tasks'));\n      this.setState({\n        tasks: tasks\n      });\n    }\n  }\n  \n  onToggleForm = () => {\n    if(this.state.isDisplayForm && this.state.taskEditing !== null){\n      this.setState({\n        isDisplayForm : true,\n        taskEditing: null\n      });\n    }else{\n      this.setState({\n        isDisplayForm : !this.state.isDisplayForm,\n        taskEditing: null\n      });\n    }\n  }\n\n  onCloseForm = () => {\n    this.setState({\n      isDisplayForm: false,\n    });\n  }\n\n  onShowForm = () => {\n    this.setState({\n      isDisplayForm: true\n    });\n  }\n\n  onSubmit = (data) => {  \n    let {tasks} = this.state;\n    if(data.id === ''){\n      // Add\n      data.id = randomstring.generate(7);\n      tasks.push(data);\n    }else{\n      // Editing\n      let index = this.findIndex(data.id);\n      tasks[index] = data;\n    }\n    this.setState({\n      tasks: tasks,\n      taskEditing: null\n    });\n    localStorage.setItem('tasks',JSON.stringify(tasks)); \n  }\n\n  onUpdateStatus = (id) => {\n    let {tasks} = this.state;\n    //let index = this.findIndex(id);\n    let index = _.findIndex(tasks,(task)=>{\n      return task.id === id\n    })\n    if(index !== -1){\n      tasks[index].status = !tasks[index].status;\n      this.setState({\n        tasks: tasks\n      });\n      localStorage.setItem('tasks',JSON.stringify(tasks));\n    }\n  }\n\n  findIndex = (id) => {\n    let {tasks} = this.state;\n    let result = -1;\n    tasks.forEach((task,index) => { \n      if(task.id === id){\n        result = index;\n      }\n    });\n    return result;\n  }\n\n  onDelete = (id) => {\n    let {tasks} = this.state;\n    let index = this.findIndex(id);\n    if(index !== -1){\n      tasks.splice(index, 1)\n      this.setState({\n        tasks: tasks\n      });\n      localStorage.setItem('tasks',JSON.stringify(tasks));\n    }\n    this.onCloseForm()\n  }\n\n  onUpdate = (id) => {\n    let {tasks} = this.state;\n    let index = this.findIndex(id);\n    let taskEditing = tasks[index];\n    this.setState({\n      taskEditing: taskEditing\n    });\n    this.onShowForm();\n  }\n\n  onFilter = (filterName,filterStatus) => {\n    filterName = filterName.toLowerCase()\n    filterStatus = parseInt(filterStatus);\n    this.setState({\n      filter:{\n        name: filterName,\n        status: filterStatus\n      }\n    });\n  }\n\n  onSearch = (keyword) => {\n    this.setState({\n      keyword: keyword\n    });\n  }\n\n  onSort = (sortBy, sortValue) => {\n    this.setState({\n      sortBy: sortBy,\n      sortValue: sortValue\n    });  \n  }\n\n  render() {\n    let {tasks, isDisplayForm, taskEditing, filter, keyword, sortBy, sortValue} = this.state;\n\n    if(filter){\n      if(filter.name){\n        tasks = tasks.filter((task)=>{\n          return task.name.toLowerCase().indexOf(filter.name) !== -1;\n        })\n      }\n      tasks = tasks.filter((task)=>{\n        if(filter.status === -1){\n          return task;\n        }else{\n          return task.status === (filter.status === 1 ? true : false);\n        }\n      })\n    }\n\n    if(keyword){\n      // tasks = tasks.filter((task) => {\n      //   return task.name.toLowerCase().indexOf(keyword) !== -1;\n      // })\n\n      tasks = _.filter(tasks, (task)=>{\n        return task.name.toLowerCase().indexOf(keyword) !== -1;\n      })\n    }\n\n    if(sortBy === 'name'){\n      tasks.sort((a,b)=>{\n       // console.log(a) {name: \"game\", status: true, id: \"5IccaPc\"}\n        if(a.name >  b.name) return sortValue;\n        else if(a.name < b.name) return -sortValue;\n        else return 0;\n      });\n    }else{\n      tasks.sort((a,b)=>{\n        if(a.status >  b.status) return -sortValue;\n        else if(a.status < b.status) return sortValue;\n        else return 0;\n      });\n    }\n    \n    let elmTaskForm = isDisplayForm === true ? <TaskForm task={taskEditing} onSubmit={this.onSubmit} onCloseForm={() => this.onCloseForm()}/> : '';\n    return (\n    <Router>\n      <div className=\"container\">\n        <div className=\"text-center\">\n            <h1>Quản Lý Công Việc</h1>\n            <hr/>\n        </div>\n        <div className=\"row\">\n            <div className={isDisplayForm === true ? \"col-xs-4 col-sm-4 col-md-4 col-lg-4\" : \"\"}>\n                {elmTaskForm}\n            </div>\n            <div className={isDisplayForm === true ? \"col-xs-8 col-sm-8 col-md-8 col-lg-8\" : \"col-xs-12 col-sm-12 col-md-12 col-lg-12\"}>\n                <button type=\"button\" className=\"btn btn-primary\" onClick={() => this.onToggleForm()}>\n                    <span className=\"fa fa-plus mr-5\"></span>Thêm Công Việc\n                </button>\n                {/* Seach - srort */}\n                <Control \n                  onSearch = {this.onSearch}\n                  onSort = {this.onSort}\n                  sortBy = {this.state.sortBy}\n                  sortValue = {this.state.sortValue}\n                />\n                <div className=\"row mt-15\">\n                    <div className=\"col-xs-12 col-sm-12 col-md-12 col-lg-12 mt-15\">\n                        {/* List */}\n                        <TaskList \n                          onFilter={this.onFilter} \n                          onUpdateStatus={this.onUpdateStatus} \n                          onUpdate={this.onUpdate} \n                          onDelete={this.onDelete} \n                          tasks={tasks}/>\n                    </div>\n                </div>\n            </div>\n        </div>\n      </div>\n    </Router>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}